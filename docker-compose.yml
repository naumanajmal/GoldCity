version: '3.8'

services:
 
  # Frontend Service
  frontend:
    build:
      context: ./client
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL}
    container_name: weather_frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-80}:80"
    networks:
      - weather_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 3s
      start_period: 10s
      retries: 3

  # Backend API Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: weather_backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-3001}:3001"
    environment:
      NODE_ENV: ${NODE_ENV}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      PORT: ${PORT}
    networks:
      - weather_network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      start_period: 40s
      retries: 3

  # Data Ingestion Service (separate container)
  ingestion:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: weather_ingestion
    restart: unless-stopped
    environment:
      NODE_ENV: ${NODE_ENV}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      WEATHER_API_URL: ${WEATHER_API_URL}
      WEATHER_API_KEY: ${WEATHER_API_KEY}
      INGESTION_INTERVAL_MINUTES: ${INGESTION_INTERVAL_MINUTES}
      TRACKED_CITIES: ${TRACKED_CITIES}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - weather_network
    command: sh -c "sleep 15 && node dist/services/ingestionService.js"

networks:
  weather_network:
    driver: bridge
